<?php

namespace App\Blogger\BlogBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CommentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommentRepository extends \Doctrine\ORM\EntityRepository//\AppBundle\Library\DoctrineExtensions\LazyEntityRepository
{
	public function getCommentsForBlog($blogId, $approved = true)
	{
		$qb = $this->createQueryBuilder('c')
			->select('c')
			->where('c.blog = :blog_id')
			->addOrderBy('c.created')
			->setParameter('blog_id', $blogId);

		if (false === is_null($approved))
			$qb->andWhere('c.approved = :approved')
				->setParameter('approved', $approved);

		return $qb->getQuery()
			->getResult();
	}
	public function getLatestComments($limit = 10)
	{
		$qb = $this->createQueryBuilder('c')
			->select('c')
			->addOrderBy('c.id', 'DESC');

		if (false === is_null($limit))
			$qb->setMaxResults($limit);

		return $qb->getQuery()
			->getResult();
	}
	/*
	public function getCommentsForBlog($blogId, $approved = true)
    {
        $qb = $this->createQueryBuilder('c')
                   ->select('c')
                   ->where('c.blog = :blog_id')
                   ->addOrderBy('c.created')
                   ->setParameter('blog_id', $blogId);

        if (false === is_null($approved))
            $qb->andWhere('c.approved = :approved')
               ->setParameter('approved', $approved);
        $res = $qb->getQuery()
                  ->getResult();
        return $res;
    }
	public function getLatestComments($limit = 10)
	{
		$qb = $this->createQueryBuilder('c')
					->select('c')
					->addOrderBy('c.id', 'DESC');

		if (false === is_null($limit))
			$qb->setMaxResults($limit);

		$results = $qb->getQuery()->getResult();
		#>mine#
		foreach($results as $comment) {
			$this->_em->getRepository('BloggerBlogBundle:Blog')->setOne($comment->getBlogId());
		}
		#<mine#
		return $results;
	}

	#>mine#
    public function getCountByBlogs($blog_id)
    {
		if(empty($blog_id)) { return array(); }
		
		if(!is_array($blog_id)) {
			$blog_id = array($blog_id);
		}
		$data = $qr = array();
		if(!empty($blog_id)) {
			$blog_id = array_unique($blog_id);
		
			$qc = $this->createQueryBuilder('c')
                   ->select('COUNT(c.id) AS cnt, c.blog_id')
                   ->where('c.blog_id IN (:barr)')
				   ->groupBy('c.blog_id')
                   ->setParameter('barr', $blog_id);

			$qr = $qc->getQuery()->getResult();
		}
		foreach($qr as $v) {
			$data[$v['blog_id']] = intval($v['cnt']);
		}
		foreach($blog_id as $key) {
			$key = intval($key);
			if(!isset($data[$key])) { $data[$key] = 0; }
		}
		
		return $data;
    }
    #<mine#
	*/
}
